/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.darrylsite.liferay.chat.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.darrylsite.liferay.chat.model.ChatUser;
import com.darrylsite.liferay.chat.model.ChatUserModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ChatUser service. Represents a row in the &quot;chatRoom_ChatUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ChatUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChatUserImpl}.
 * </p>
 *
 * @author Darryl Kpizingui
 * @see ChatUserImpl
 * @see ChatUser
 * @see ChatUserModel
 * @generated
 */
@ProviderType
public class ChatUserModelImpl extends BaseModelImpl<ChatUser>
	implements ChatUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a chat user model instance should use the {@link ChatUser} interface instead.
	 */
	public static final String TABLE_NAME = "chatRoom_ChatUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "pseudo", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "avatar", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pseudo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("avatar", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chatRoom_ChatUser (id_ LONG not null primary key,pseudo VARCHAR(75) null,description VARCHAR(75) null,userId LONG,avatar VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table chatRoom_ChatUser";
	public static final String ORDER_BY_JPQL = " ORDER BY chatUser.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chatRoom_ChatUser.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(chat.room.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.darrylsite.liferay.chat.model.ChatUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(chat.room.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.darrylsite.liferay.chat.model.ChatUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(chat.room.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.darrylsite.liferay.chat.model.ChatUser"),
			true);
	public static final long PSEUDO_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(chat.room.service.service.util.ServiceProps.get(
				"lock.expiration.time.com.darrylsite.liferay.chat.model.ChatUser"));

	public ChatUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChatUser.class;
	}

	@Override
	public String getModelClassName() {
		return ChatUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("pseudo", getPseudo());
		attributes.put("description", getDescription());
		attributes.put("userId", getUserId());
		attributes.put("avatar", getAvatar());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String pseudo = (String)attributes.get("pseudo");

		if (pseudo != null) {
			setPseudo(pseudo);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String avatar = (String)attributes.get("avatar");

		if (avatar != null) {
			setAvatar(avatar);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getPseudo() {
		if (_pseudo == null) {
			return StringPool.BLANK;
		}
		else {
			return _pseudo;
		}
	}

	@Override
	public void setPseudo(String pseudo) {
		_columnBitmask |= PSEUDO_COLUMN_BITMASK;

		if (_originalPseudo == null) {
			_originalPseudo = _pseudo;
		}

		_pseudo = pseudo;
	}

	public String getOriginalPseudo() {
		return GetterUtil.getString(_originalPseudo);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getAvatar() {
		if (_avatar == null) {
			return StringPool.BLANK;
		}
		else {
			return _avatar;
		}
	}

	@Override
	public void setAvatar(String avatar) {
		_avatar = avatar;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ChatUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ChatUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ChatUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChatUserImpl chatUserImpl = new ChatUserImpl();

		chatUserImpl.setId(getId());
		chatUserImpl.setPseudo(getPseudo());
		chatUserImpl.setDescription(getDescription());
		chatUserImpl.setUserId(getUserId());
		chatUserImpl.setAvatar(getAvatar());

		chatUserImpl.resetOriginalValues();

		return chatUserImpl;
	}

	@Override
	public int compareTo(ChatUser chatUser) {
		long primaryKey = chatUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ChatUser)) {
			return false;
		}

		ChatUser chatUser = (ChatUser)obj;

		long primaryKey = chatUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ChatUserModelImpl chatUserModelImpl = this;

		chatUserModelImpl._originalPseudo = chatUserModelImpl._pseudo;

		chatUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ChatUser> toCacheModel() {
		ChatUserCacheModel chatUserCacheModel = new ChatUserCacheModel();

		chatUserCacheModel.id = getId();

		chatUserCacheModel.pseudo = getPseudo();

		String pseudo = chatUserCacheModel.pseudo;

		if ((pseudo != null) && (pseudo.length() == 0)) {
			chatUserCacheModel.pseudo = null;
		}

		chatUserCacheModel.description = getDescription();

		String description = chatUserCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			chatUserCacheModel.description = null;
		}

		chatUserCacheModel.userId = getUserId();

		chatUserCacheModel.avatar = getAvatar();

		String avatar = chatUserCacheModel.avatar;

		if ((avatar != null) && (avatar.length() == 0)) {
			chatUserCacheModel.avatar = null;
		}

		return chatUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", pseudo=");
		sb.append(getPseudo());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", avatar=");
		sb.append(getAvatar());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.darrylsite.liferay.chat.model.ChatUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pseudo</column-name><column-value><![CDATA[");
		sb.append(getPseudo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avatar</column-name><column-value><![CDATA[");
		sb.append(getAvatar());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ChatUser.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ChatUser.class
		};
	private long _id;
	private String _pseudo;
	private String _originalPseudo;
	private String _description;
	private long _userId;
	private String _avatar;
	private long _columnBitmask;
	private ChatUser _escapedModel;
}